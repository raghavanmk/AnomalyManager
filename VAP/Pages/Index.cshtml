@page
@model IndexModel
@{
    ViewData["Title"] = "Index";
}

<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        position: absolute;
        top: 53%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: transparent;
        padding: 10px;
        width: 80%;
        max-width: 90%;
        height: 100%;
        max-height: 100%;
        border-radius: 5px;
        overflow: hidden;
    }

    .close {
        color: black;
        position: absolute;
        top: -5px;
        right: 4px;
        font-size: 28px;
        font-weight: bold;
        z-index: 1005;
    }

    .close:hover,
    .close:focus {
        color: red;
        text-decoration: none;
        cursor: pointer;
    }

    .imgfluid {
        border: 5px solid #fff;
    }

    .filter {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .checkbox-column {
        width: 50px;
    }

    td img {
        height: 100px;
        width: 100px;
    }

    .batchStatusForm {
        float:right;
    }
    
</style>

<div class="filter">
    <form method="get">
        <label for="dateFrom">Date From:</label>
        <input type="date" id="dateFrom" name="dateFrom" asp-for="DateFrom">

        <label for="dateTo">Date To:</label>
        <input type="date" id="dateTo" name="dateTo" asp-for="DateTo">

        <label for="detectionCheckFilter">Detection Check:</label>
        <select id="detectionCheckFilter" name="detectionCheckFilter" asp-for="DetectionCheckFilter">
            <option value="To be validated">To be validated</option>
            <option value="Alert">Alert</option>
            <option value="Not Alert">Not Alert</option>
        </select>

        <button type="submit">Apply Filters</button>
        <button type="submit" onclick="resetFilters()">Reset Filters</button>
    </form>

    <div>Total Rows: <span id="rowCount">@Model.Detections.Count</span></div>
</div>

<form method="post" id="batchStatusForm" class="batchStatusForm" style="display:none;" asp-page-handler="UpdateStatus">
    <input type="hidden" name="selectedIds" id="selectedIds" />
    <select class="status-select" name="NewStatus">
        <option value="To be validated">To be validated</option>
        <option value="Alert">Alert</option>
        <option value="Not Alert">Not Alert</option>
    </select>
    <button type="submit">Update Selected</button>
</form>

<table class="table" id="detectionsTable">
    <thead>
        <tr>
            <th class="checkbox-column">Select</th>

            <th>Id</th>
            <th>CameraSerial</th>
            <th>Detection</th>
            <th>Timestamp</th>
            <th>Image</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var detection in Model.Detections!)
        {
            <tr>
                <td class="checkbox-column">
                    <input type="checkbox" class="row-checkbox" value="@detection.Id" />
                </td>
                <td>@detection.Id</td>
                <td>@detection.Camera</td>
                <td>@detection.Label</td>
                <td>@detection.Timestamp</td>
                <td><img src="@detection.ImageLink" onclick="openModal('@detection.ImageLink')" style="cursor: pointer" /></td>
                <td>
                    <form method="post" asp-page-handler="UpdateStatus" asp-route-detectionId="@detection.Id">
                        <select class="status-select" name="NewStatus">
                            @{
                                var options = new List<string> { "To be validated", "Alert", "Not Alert" };

                                foreach (var option in options)
                                {
                                    if (option == detection.DetectionCheck)
                                    {
                                        <option value="@option" selected disabled>@option</option>
                                    }
                                    else
                                    {
                                        <option value="@option">@option</option>
                                    }
                                }
                            }

                        </select>
                        <button type="submit">Update</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>


<div id="imageModal" class="modal" onclick="closeModal()">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <div class="modal-body">
            <img id="modalImage" style="max-height: 60%; width: 100%" class="imgfluid" src="" alt="Image">
        </div>
    </div>
</div>

<script>

    const checkboxes = document.querySelectorAll('.row-checkbox');

    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            const selectedIds = Array.from(checkboxes)
                .filter(cb => cb.checked)
                .map(cb => cb.value);

            document.getElementById('selectedIds').value = selectedIds.join(',');
            document.getElementById('batchStatusForm').style.display = selectedIds.length > 0 ? 'block' : 'none';
        });
    });

    function resetFilters() {
        var date = new Date().toISOString().split('T')[0];
        document.getElementById('dateFrom').value = date;
        document.getElementById('dateTo').value = date;
        document.getElementById('detectionCheckFilter').value = 'To be validated';

        fetch(`/Index?dateFrom=${date}&dateTo=${date}&detectionCheckFilter=To+be+validated`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
            })
            .catch(error => {
                console.error('There was a problem with resetting filters:', error);
            });
    }

    function openModal(imageUrl) {
        document.getElementById("modalImage").src = imageUrl;
        document.getElementById("imageModal").style.display = "block";
    }

    function closeModal() {
        console.log("CloseModal")
        document.getElementById("imageModal").style.display = "none";
    }

</script>
